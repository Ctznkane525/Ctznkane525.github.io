{"version":3,"sources":["images/wolf.png","images/walrus.png","images/idontknow.png","images/elephant.png","images/header.png","addend/Addend.js","add/Add.js","gamescore/GameScore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","range","size","startAt","Array","keys","map","i","Addend","props","style","display","verticalAlign","width","height","number","textAlign","src","image","alt","Add","useState","msg","setMsg","images","Wolf","Walrus","Idk","Elephant","Math","floor","random","length","imageIndex","React","createRef","checkRef","className","key","number1","method","sign","number2","type","ref","onClick","current","value","sumDiff","toString","setTimeout","onSuccess","check","GameScore","score","App","setMethod","gameId","setGameId","setScore","num1","num2","t","resetGame","theMethod","logo","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6d0b76f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wolf.e9842cd2.png\";","module.exports = __webpack_public_path__ + \"static/media/walrus.ccd213ab.png\";","module.exports = __webpack_public_path__ + \"static/media/idontknow.4b8b59c5.png\";","module.exports = __webpack_public_path__ + \"static/media/elephant.61192117.png\";","module.exports = __webpack_public_path__ + \"static/media/header.4d4f5730.png\";","import React from 'react';\r\n\r\nconst Addend = (props) =>\r\n{\r\n    return (<span>\r\n        <span style={{display: 'inline-block', verticalAlign: 'top', width: '3%', height: '2%'}}>{props.number}</span>\r\n        <span style={{display: 'inline-block', width: '5%'}}></span>\r\n        <span style={{textAlign: 'left', display: 'inline-block', width: '80%'}}>\r\n        \r\n        {range(props.number, 1).map((i) => {\r\n            return <span>\r\n                <img src={props.image} alt=\"Wolf\" style={{width: '8%', height: '2%'}}/>\r\n                <div style={{display: 'inline-block', width: '0.5%'}}></div>\r\n            </span>\r\n        })}\r\n        \r\n        </span></span>);\r\n}\r\n\r\n    \r\nconst range = (size, startAt = 0) => {\r\n    return [...Array(size).keys()].map(i => i + startAt);\r\n}\r\n\r\nexport default Addend;","import React, {useState} from 'react';\r\nimport Addend from '../addend/Addend';\r\nimport Wolf from '../images/wolf.png'\r\nimport Walrus from '../images/walrus.png'\r\nimport Idk from '../images/idontknow.png'\r\nimport Elephant from '../images/elephant.png'\r\nimport './Add.css'\r\n\r\n\r\n\r\nconst Add = (props) =>\r\n{\r\n\r\n    const [msg, setMsg] = useState(\"\");\r\n    \r\n    const images = [Wolf, Walrus, Idk, Elephant];\r\n\r\n    const [imageIndex] = useState(Math.floor(Math.random() * images.length));\r\n    \r\n    const [checkRef] = useState(React.createRef());\r\n\r\n    const sign = (props) =>\r\n    {\r\n        if (props.method === \"add\")\r\n            return \"+\";\r\n        else\r\n            return \"-\";\r\n    }\r\n\r\n    const sumDiff = (props) =>\r\n    {\r\n        if (props.method === \"add\")\r\n            return props.number1+props.number2;\r\n        else\r\n            return props.number1-props.number2;\r\n    }\r\n\r\n    const check = (props) =>\r\n    {\r\n        let currVal = checkRef.current?.value;\r\n        if (currVal === sumDiff(props).toString())\r\n        {\r\n            setMsg(\"Good Job\");\r\n            setTimeout(() => {props.onSuccess()}, 1000);\r\n        }\r\n        else\r\n        {\r\n            setMsg(\"Incorrect, please keep trying!\")\r\n        }\r\n    }\r\n\r\n    return (<span>\r\n                <span className=\"top-left-space\"></span>\r\n                <Addend image={images[imageIndex]} key=\"number1\" number={props.number1}></Addend><br></br>\r\n                <span className=\"plus-sign\">{sign(props)}</span>\r\n                <Addend image={images[imageIndex]} key=\"number2\" number={props.number2}></Addend><br></br>\r\n                <span className=\"equals-sign\">=</span>\r\n                <input className=\"input\" type=\"text\" ref={checkRef}></input>&nbsp;\r\n                <button onClick={() => check(props)}>Check Answer</button><span className=\"message\">{msg}</span>\r\n        </span>\r\n        )\r\n}\r\n\r\nexport default Add;\r\n","export const GameScore = (props) => \r\n{\r\n\r\n    return \"Score: \" + props.score.toString();\r\n}\r\n\r\nexport default GameScore;","import React, { useState } from 'react';\nimport Add from './add/Add'\nimport logo from './images/header.png';\nimport './App.css';\nimport GameScore from './gamescore/GameScore';\n\n\n\nfunction App() {\n\n  const [method, setMethod] = useState(\"add\");\n  const [gameId, setGameId] = useState(1);\n  const [score, setScore] = useState(0);\n\n  var num1 = Math.floor(Math.random() * 9) + 1;\n  var num2 = Math.floor(Math.random() * 9) + 1; \n\n  if ( method !== \"add\" && num2 > num1)\n  {\n    let t = num2;\n    num2 = num1;\n    num1 = t;\n  }\n\n  function header()\n  {\n    if (method === \"add\")\n      return \"Addition\";\n    else\n      return \"Subtraction\";\n  }\n\n  function resetGame(theMethod)\n  {\n    setMethod(theMethod); \n    setGameId(gameId + 1);\n  }\n\n  function addButton()\n  {\n    if (method === \"add\")\n      return null;\n    else\n      return (<button onClick={() => resetGame(\"add\")}>Switch To Addition Mode</button>);\n  }\n\n  function subButton()\n  {\n    if (method === \"sub\")\n      return null;\n    else\n      return (<button onClick={() => resetGame(\"sub\")}>Switch To Subtraction Mode</button>);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        Welcome to Wild Kratts {header()}!\n      </header>\n      <div style={{textAlign: 'left', paddingLeft: '20%'}}>\n        <br></br>\n        <Add onSuccess={() => {resetGame(method); setScore(score + 10)}} method={method} key={method+gameId.toString()} number1={num1} number2={num2}></Add>\n      </div>\n      <div>\n        <br></br>\n        <GameScore score={score}/>\n      </div>\n      <div> \n        <br></br>\n        {addButton()}\n        {subButton()}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"Hello\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}